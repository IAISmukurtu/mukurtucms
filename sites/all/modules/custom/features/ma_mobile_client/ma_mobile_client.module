<?php

/**
 * @file
 * Code for the Mukurtu Mobile Client feature.
 */

include_once 'ma_mobile_client.features.inc';

/**
 * Called by dashboard link -- toggle Mukurtu Mobile enabled.
 */
function ma_mobile_client_toggle_mukurtu_mobile() {
  if (variable_get('mukurtu_mobile_enabled')) {
    variable_set ('mukurtu_mobile_enabled', 0);
    drupal_set_message('Mukurtu Mobile disabled.');
  }
  else {
    variable_set ('mukurtu_mobile_enabled', 1);
    drupal_set_message('Mukurtu Mobile enabled.');
  }
  drupal_goto ('dashboard');
}

/**
 * Implements hook_menu().
 */
function ma_mobile_client_menu() {
  $items = [];

  $items['admin/toggle-mukurtu-mobile'] = [
    'title' => 'Toggle Mukurtu Mobile',
    'page callback' => 'ma_mobile_client_toggle_mukurtu_mobile',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  ];

  $items['node/%node/mobile-sync-toggle/%'] = [
      'page callback' => 'ma_mobile_client_toggle_sync_node',
      'page arguments' => array(1, 3),
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
      'delivery callback' => 'ajax_deliver',
    ];

  return $items;
}

/**
 * Add or Remove a node from a user's mukurtu mobile synced nodes list (via ajax link)
 */
function ma_mobile_client_toggle_sync_node($node, $color) {

  // This would only happen via someone intentionally trying to hack in (hitting the toggle URL).
  // Important because otherwise a node they can't access will sync to their phone.
  if (!node_access('view', $node)) {
    return;
  }

  // Save to the user the new list of synced nodes.
  global $user;
  $uw = entity_metadata_wrapper('user', $user);
  $synced_nodes = $uw->field_mm_sync->raw();
  if (($key = array_search($node->nid, $synced_nodes)) !== FALSE) {
    unset($synced_nodes[$key]);
  }
  else {
    $synced_nodes[] =  $node->nid;
  }
  $uw->field_mm_sync->set($synced_nodes);
  $uw->save();

  // Update the mobile sync icon link (image and tooltip) for this node via ajax.
  return array(
    '#type' => 'ajax',
    '#commands' => [ajax_command_replace('.mobile-sync-' . $node->nid, ma_mobile_client_generate_toggle_link($node, $color))],
  );

}


/**
 * Generate the link to sync/unsync a node for a user.
 */
function ma_mobile_client_generate_toggle_link($node, $color = '') {
  if (user_is_logged_in()) {

    // If viewing another user's profile page, do not render the sync icons for any of the items in the blocks.
    // (would be very confusing because the sync would happen for viewing user, though the nodes displayed are for the viewed user)
    if (arg(0) == 'user' && !ma_mobile_client_viewing_own_profile()) {
      return;
    }

    if (!$node->type) {
      $node->type = $node->node_type; // when called by the My Mukurtu Mobile Content view (as opposed to the DS field)
    }
    global $user;
    $uw = entity_metadata_wrapper('user', $user);
    $synced_nodes = $uw->field_mm_sync->raw();
    if (in_array($node->nid, $synced_nodes)) {
      $icon = "synced";
      $link_text = 'Remove this ' . node_type_get_name($node->type) . ' from your Mukurtu Mobile synced content.';
    }
    else {
      $icon = "unsynced";
      $link_text = 'Add this ' . node_type_get_name($node->type) . ' to your Mukurtu Mobile synced content.';
    }
    if (!$color) {
      switch (theme_get_setting('mukurtu_theme_color_scheme', 'mukurtu')) {
        case 'red-bone':
          $color = 'red';
          break;
        default:
          $color = 'blue';
      }
    }
    $classes = [
      'use-ajax',
      'mobile-sync-icon',
      'mobile-sync-' . $node->nid,
    ];
    return l('<img src="/sites/all/themes/mukurtu/images/icons/mobile-' . $icon . '-' . $color . '.png">', 'node/' . $node->nid . '/mobile-sync-toggle/' . $color, ['html' => TRUE, 'attributes' => ['class' => $classes, 'title' => $link_text]]);
  }

}

/**
 * Check if viewing own profile page.
 *
 * Used as the view perm for My Mukurtu Mobile Content, and also in ma_mobile_client_generate_toggle_link()
 * to hide the sync icon on the nodes in the other blocks (Community, Protocols) when not viewing own profile.
 */
function ma_mobile_client_viewing_own_profile() {
  global $user;
  if ($user->uid == arg(1)) {
    return TRUE;
  }
}

/**
 * Implements of hook_services_resources().
 */
function ma_mobile_client_services_resources() {
  $api = [

    'one_time_login' => [
      'operations' => [
        'retrieve' => [
          'help' => 'Retrieve a one-time-login URL for the currently authed user, to use to auth the user in the mobile browser',
          'callback' => '_ma_mobile_client_get_one_time_login',
          'access callback' => 'user_is_logged_in',
          'args' => [
            [
              'name' => 'fn',
              'type' => 'string',
              'description' => 'Function to perform',
              'source' => ['path' => '0'],
              'optional' => FALSE,
            ],
          ],
        ],
      ],
    ],

    'synced_nodes' => [
      'operations' => [
        'retrieve' => [
          'help' => "Retrieve a structured array of a user's list of synced nodes",
          'callback' => '_ma_mobile_client_get_user_synced_nodes',
          'access callback' => 'user_is_logged_in',
          'args' => [
            [
              'name' => 'fn',
              'type' => 'string',
              'description' => 'Function to perform',
              'source' => ['path' => '0'],
              'optional' => FALSE,
            ],
          ],
        ],
      ],
    ],

    'creatable_types' => [
      'operations' => [
        'retrieve' => [
          'help' => "Retrieve a list of content types for which nodes of that type can be created from the Mukurtu Mobile app",
          'callback' => '_ma_mobile_client_get_creatable_types',
          'access callback' => 'user_is_logged_in',
          'args' => [
            [
              'name' => 'fn',
              'type' => 'string',
              'description' => 'Function to perform',
              'source' => ['path' => '0'],
              'optional' => FALSE,
            ],
          ],
        ],
      ],
    ],

    'content_type_form' => [
      'operations' => [
        'retrieve' => [
          'help' => "Retrieves a tcomb-form to use as the node form for the passed content type.",
          'callback' => '_ma_mobile_client_get_tcomb_node_form',
          'access callback' => 'user_is_logged_in',
          'args' => [
            [
              'name' => 'fn',
              'type' => 'string',
              'description' => 'Function to perform',
              'source' => ['path' => '0'],
              'optional' => FALSE,
            ],
            [
              'name' => 'type',
              'type' => 'string',
              'description' => 'Content type',
              'source' => ['path' => '1'],
              'optional' => FALSE,
            ],

          ],
        ],
      ],
    ],

  ];

  return $api;
}

/**
 * Provide a one-time-login link.
 */
function _ma_mobile_client_get_one_time_login($fn) {
  global $user; // TODO: confirm this user is the correct one
  return array (
    'user' => $user,
    'login_link' =>  user_pass_reset_url($user),
  );
}

/**
 * Retrieve a NID list of a user's synced nodes, w/ last updated time, so that we don't try to sync unchanged nodes.
 */
function _ma_mobile_client_get_user_synced_nodes ($fn) {
  global $user; // TODO: confirm this user is the correct one
  $uw = entity_metadata_wrapper('user', $user);
  $synced_nodes = $uw->field_mm_sync->value();
  $synced_nids = [];
  foreach ($synced_nodes as $synced_node) {
    $synced_nids[$synced_node->type][$synced_node->nid] = $synced_node->changed;
  }
  return $synced_nids;
}

/**
 * Retrieve a tcomb-form to use as the node form for the passed content type.
 */
function _ma_mobile_client_get_creatable_types ($fn = NULL) {
  $creatable_types = [];
  foreach (node_type_get_types() as $type) {
    if (variable_get('mukurtu_mobile_create_' . $type->type)) {
      $creatable_types[$type->type] = [
        'label' => $type->name,
        'description' => $type->description
      ];
    }
  }
  return $creatable_types;
}

/**
 * Retrieve a NID list of a user's synced nodes, w/ last updated time, so that we don't try to sync unchanged nodes.
 */
function _ma_mobile_client_get_tcomb_node_form ($fn, $content_type) {


  if (!node_type_get_type($content_type)) {
    return 'Content type ' . $content_type . ' does not exist';
  }
  if (!key_exists($content_type, _ma_mobile_client_get_creatable_types())) {
    return 'Content type ' . $content_type . ' exists, but is not a valid app-creatable type.';
  }

  $fields = field_info_instances("node", $content_type);

  // Remove certain fields.
  $skip_fields = [
    'field_book_children',
    'field_book_parent',
    'field_pre_actions',
    '',
    '',
  ];


  // Loop through the fields to:
  // 1. Remove any skip fields.
  // 2. Group the fields into the groups they are already defined in (tcomb form expects each group in its own array), so the app will replicate the desktop fieldgroups.

  $grouped_fields = [];
  foreach ($fields as $field_name => $field) {
    if (!in_array($field_name, $skip_fields)) { // Remove any skip fields.
      if ($field_group = field_get_field_group($field)) { // Group the fields into the groups they are already defined in (tcomb form expects each group in its own array), so the app will replicate the desktop fieldgroups.
        $field_group_name = $field_group->label;
      }
      else {
        $field_group_name = 'none';
      }
      // Define the return array according to tcomb form spec.
      $grouped_fields[$field_group_name][$field['field_name']] = $field;
    }
  }

  // Build the tcomb form. See https://gcanti.github.io/resources/json-schema-to-tcomb/playground/playground.html for the spec.
  $tcomb_form = [];
  foreach ($grouped_fields as $field_group_name => $group_fields) {
    $form_group = [
      'type' => 'group',
      'label' => $field_group_name,
      'form' => [
        'type' => 'object',
      ],
    ];

    foreach ($group_fields as $field_name => $field) {
      $field_info = field_info_field($field_name);

      switch ($field_info['type']) {
        case "entityreference":
        case "atom_reference":
        case "number_integer":
        case "node_reference":
          $tcomb_field = [
            'type' => 'number',
            'integer' => 1,
          ];
          break;
        case "text_long":
        case "text_with_summary":
          $tcomb_field = [
            'type' => 'string',
            'integer' => 1,
          ];
          break;
        case "list_text":
          break;
        case "list_integer":
          break;
        case "list_boolean":
          break;
        case "paragraphs":
          break;
        case "geofield":
          break;
        case "partial_date_range":
          break;
        case "datetime":
          break;
      }
      $form_group['form']['properties'] = $tcomb_field;
      $form_group['options']['fields'][$field_name]['label'] = $field['label'];
      if ($field["required"]) {
        $form_group['form']['required'][] = $field_name;
      }

    }

    $tcomb_form[] = $form_group;
  }

//  $field_info["settings"]["max_length"]
//  $field["widget"]["settings"]["size"]
//  $field_info["settings"]["allowed_values"][0]


  // Custom handling per content type.
  switch ($content_type) {
    case 'digital_heritage':
      break;
  }

  return $tcomb_form;

}



function field_get_field_group($field) {
  $group_info = field_group_read_groups(array('entity_type' => $field['entity_type'], 'bundle' => $field['bundle']));
  foreach ($group_info[$field['entity_type']][$field['bundle']]['form'] as $group) {
    if (in_array($field['field_name'], $group->children)) {
      return $group;
    }
  }
  return FALSE;
}

/**
 * Called from hook_update and hook_install to set to the default types that can be created by Mukurtu Mobile.
 */
function ma_mobile_client_set_default_creatable_types() {
  $default_creatable_types = ['community', 'cultural_protocol_group', 'dictionary_word', 'digital_heritage', 'person', 'personal_collection', 'word_list'];
  foreach ($default_creatable_types as $default_creatable_type) {
    variable_set('mukurtu_mobile_create_' . $default_creatable_type, 1);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add Mukurtu Mobile configuration options per content type (edit form of the content type).
 */
function ma_mobile_client_form_node_type_form_alter(&$form, $form_state) {
  if (variable_get('mukurtu_mobile_enabled')) {
    if (isset($form['#node_type']->type)) {
      $form['mukurtu_mobile'] = [
        '#type' => 'fieldset',
        '#title' => t('Mukurtu Mobile settings'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#group' => 'additional_settings',
      ];
      $form['mukurtu_mobile']['mukurtu_mobile_create'] = [
        '#type' => 'checkbox',
        '#title' => t('Content of this type can be created from within the Mukurtu Mobile app.'),
        '#default_value' => variable_get('mukurtu_mobile_create_' . $form['#node_type']->type),
      ];
    }
  }
}
