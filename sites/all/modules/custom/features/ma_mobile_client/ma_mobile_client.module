<?php

/**
 * @file
 * Code for the Mukurtu Mobile Client feature.
 */

include_once 'ma_mobile_client.features.inc';

/**
 * Implements hook_menu().
 */
function ma_mobile_client_menu() {
  $items = [];

  $items['admin/config/mukurtu-mobile'] = [
    'title' => 'Configure Mukurtu Mobile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ma_mobile_client_admin_config'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  ];

  $items['node/%node/mobile-sync-toggle/%'] = [
    'page callback' => 'ma_mobile_client_toggle_sync_node',
    'page arguments' => array(1, 3),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  ];

  $items['mobile/login/%/%/%'] = array(
    'title' => 'Mobile browser login',
    'page callback' => 'ma_mobile_client_browser_login',
    'page arguments' => array(2, 3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Mukurtu Mobile admin config form.
 * Linked from Dashboard.
 */
function ma_mobile_client_admin_config($form, $form_state) {

  $form['mukurtu_mobile_enabled'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable access to the site via the Mukurtu Mobile app.'), // TODO: link to the app here.
    '#default_value' => variable_get ('mukurtu_mobile_enabled', 0),
  ];

  ////
  // Content types table
  ////

  $ordered_types = variable_get('mukurtu_mobile_content_types', []);
  uasort($ordered_types, 'drupal_sort_weight');
  $node_types = node_type_get_names();

  // If a node type has been added since var mukurtu_mobile_creatable_content_types was last set
  // (meaning it wasn't saved to the mukurtu_mobile_creatable_content_types in this form nor in a hook_update or hook_install when the type was created)
  // then we need to ensure it gets added to this form, but at the bottom.
  foreach ($node_types as $type => $type_name) {
    if (!array_key_exists($type, $ordered_types)) {
      if (!isset($highest_weight)) {
        $highest_weight = end($ordered_types)['weight'] ? end($ordered_types)['weight'] : 0;
      }
      $highest_weight += 10;
      $ordered_types[$type] = [
        'creatable' => 0,
        'weight' => $highest_weight,
      ];
    }
  }

  $form['table'] = [
    '#type' => 'fieldset',
    '#title' => t('Mukurtu Mobile Content Types'),
    'help_text' => [
      '#markup' => 'Check the content types for which content can be created within the Mukurtu Mobile app.<br/>Use the arrows to drag the content types into the order that they will display in the Create Content page in the app.',
    ],
    'mukurtu_mobile_content_types' => [
      '#tree' => TRUE,
      '#theme' => 'node_types_table',
    ],
  ];

  foreach ($ordered_types as $node_type => $node_type_properties) {
    $form['table']['mukurtu_mobile_content_types'][$node_type] = [
      'creatable' => [
        '#type' => 'checkbox',
        '#default_value' => $node_type_properties['creatable'],
      ],
      'label' => [
        '#type' => 'item',
        '#markup' => $node_types[$node_type],
      ],
      'weight' => [
        '#type' => 'textfield',
        '#default_value' => $node_type_properties['weight'],
        '#size' => 3,
        '#attributes' => ['class' => ['item-row-weight']],
      ],
    ];
  }

  return system_settings_form($form);
}

/**
 * Implements hook_theme().
 */
function ma_mobile_client_theme($existing, $type, $theme, $path) {
  $themes = array(
    'node_types_table' => array(
      'render element' => 'element'
    ),
  );
  return $themes;
}

/**
 * Make the node types table rows draggable; the resulting order is used when listing the content types in the add screen in the app.
 */
function theme_node_types_table($vars) {
  $element = $vars['element'];
  drupal_add_tabledrag('node_types_table', 'order', 'sibling', 'item-row-weight');

  $header = array(
    'creatable' => t('Creatable'),
    'label' => t('Content Type'),
    'weight' => t('Weight'),
  );

  $rows = array();
  foreach (element_children($element) as $key) {
    $row = array();
    $row['data'] = array();
    foreach ($header as $fieldname => $title) {
      $row['data'][] = drupal_render($element[$key][$fieldname]);
      $row['class'] = array('draggable');
    }
    $rows[] = $row;
  }

  return theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => 'node_types_table'),
  ));
}


/**
 * Add or Remove a node from a user's mukurtu mobile synced nodes list (via ajax link)
 */
function ma_mobile_client_toggle_sync_node($node, $color) {

  // This would only happen via someone intentionally trying to hack in (hitting the toggle URL).
  // Important because otherwise a node they can't access will sync to their phone.
  if (!node_access('view', $node)) {
    return;
  }

  // Save to the user the new list of synced nodes.
  global $user;
  $uw = entity_metadata_wrapper('user', $user);
  $synced_nodes = $uw->field_mm_sync->raw();
  if (($key = array_search($node->nid, $synced_nodes)) !== FALSE) {
    unset($synced_nodes[$key]);
  }
  else {
    $synced_nodes[] =  $node->nid;
  }
  $uw->field_mm_sync->set($synced_nodes);
  $uw->save();

  // Update the mobile sync icon link (image and tooltip) for this node via ajax.
  return array(
    '#type' => 'ajax',
    '#commands' => [ajax_command_replace('.mobile-sync-' . $node->nid, ma_mobile_client_generate_toggle_link($node, $color))],
  );

}


/**
 * Generate the link to sync/unsync a node for a user.
 */
function ma_mobile_client_generate_toggle_link($node, $color = '') {
  if (user_is_logged_in()) {

    // If viewing another user's profile page, do not render the sync icons for any of the items in the blocks.
    // (would be very confusing because the sync would happen for viewing user, though the nodes displayed are for the viewed user)
    if (arg(0) == 'user' && !ma_mobile_client_viewing_own_profile()) {
      return;
    }

    if (!$node->type) {
      $node->type = $node->node_type; // when called by the My Mukurtu Mobile Content view (as opposed to the DS field)
    }
    global $user;
    $uw = entity_metadata_wrapper('user', $user);
    $synced_nodes = $uw->field_mm_sync->raw();
    if (in_array($node->nid, $synced_nodes)) {
      $icon = "synced";
      $link_text = 'Remove this ' . node_type_get_name($node->type) . ' from your Mukurtu Mobile synced content.';
    }
    else {
      $icon = "unsynced";
      $link_text = 'Add this ' . node_type_get_name($node->type) . ' to your Mukurtu Mobile synced content.';
    }
    if (!$color) {
      switch (theme_get_setting('mukurtu_theme_color_scheme', 'mukurtu')) {
        case 'red-bone':
          $color = 'red';
          break;
        default:
          $color = 'blue';
      }
    }
    $classes = [
      'use-ajax',
      'mobile-sync-icon',
      'mobile-sync-' . $node->nid,
    ];
    return l('<img src="/sites/all/themes/mukurtu/images/icons/mobile-' . $icon . '-' . $color . '.png">', 'node/' . $node->nid . '/mobile-sync-toggle/' . $color, ['html' => TRUE, 'attributes' => ['class' => $classes, 'title' => $link_text]]);
  }

}

/**
 * Callback to a log a user into the mobile browser using the link obtained by the app from the one-time-login endpoint.
 * This is based on user_pass_reset().
 */
function ma_mobile_client_browser_login($uid, $timestamp, $hashed_pass) {
  global $user;
  if ($user->uid) {
    //    drupal_set_message(t('User is already logged in.'), 'error');
    drupal_goto();
  }
  else {
    $timeout = 60;
    $current = REQUEST_TIME;
    $users = user_load_multiple(array($uid), array('status' => '1'));
    if ($timestamp <= $current && $account = reset($users)) {
      if ($current - $timestamp > $timeout) {
        drupal_set_message(t('Login link expires after ' . $timeout . 'seconds.'), 'error');
        drupal_goto('');
      }
      elseif ($account->uid && $timestamp >= $account->login && $timestamp <= $current && $hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login, $account->uid)) {
        $user = $account;
        user_login_finalize();
        drupal_goto('');
      }
      else {
        drupal_set_message(t('Login link already used or invalid.'), 'error');
        drupal_goto('');
      }
    }
    else {
      drupal_access_denied();
      drupal_exit();
    }
  }
}


/**
 * Check if viewing own profile page.
 *
 * Used as the view perm for My Mukurtu Mobile Content, and also in ma_mobile_client_generate_toggle_link()
 * to hide the sync icon on the nodes in the other blocks (Community, Protocols) when not viewing own profile.
 */
function ma_mobile_client_viewing_own_profile() {
  global $user;
  if ($user->uid == arg(1)) {
    return TRUE;
  }
}

/**
 * Implements of hook_services_resources().
 */
function ma_mobile_client_services_resources() {
  $api = [

    'one_time_login' => [
      'operations' => [
        'retrieve' => [
          'help' => 'Retrieve a one-time-login URL for the currently authed user, to use to auth the user in the mobile browser',
          'callback' => '_ma_mobile_client_get_one_time_login',
          'access callback' => 'user_is_logged_in',
          'args' => [
            [
              'name' => 'fn',
              'type' => 'string',
              'description' => 'Function to perform',
              'source' => ['path' => '0'],
              'optional' => FALSE,
            ],
          ],
        ],
      ],
    ],

    'synced_nodes' => [
      'operations' => [
        'retrieve' => [
          'help' => "Retrieve a structured array of a user's list of synced nodes",
          'callback' => '_ma_mobile_client_get_user_synced_nodes',
          'access callback' => 'user_is_logged_in',
          'args' => [
            [
              'name' => 'fn',
              'type' => 'string',
              'description' => 'Function to perform',
              'source' => ['path' => '0'],
              'optional' => FALSE,
            ],
          ],
        ],
      ],
    ],

    'creatable_types' => [
      'operations' => [
        'retrieve' => [
          'help' => "Retrieve a list of content types for which nodes of that type can be created from the Mukurtu Mobile app",
          'callback' => '_ma_mobile_client_get_creatable_types',
          'access callback' => 'user_is_logged_in',
          'args' => [
            [
              'name' => 'fn',
              'type' => 'string',
              'description' => 'Function to perform',
              'source' => ['path' => '0'],
              'optional' => FALSE,
            ],
          ],
        ],
      ],
    ],

    'node_form_fields' => [
      'operations' => [
        'retrieve' => [
          'help' => "Retrieves the fields and their properties, and fieldgroups, of the passed content type for the current user, to be used by the app in constructing the form in React.",
          'callback' => '_ma_mobile_client_get_node_form_fields',
          'access callback' => 'user_is_logged_in',
          'args' => [
            [
              'name' => 'fn',
              'type' => 'string',
              'description' => 'Function to perform',
              'source' => ['path' => '0'],
              'optional' => FALSE,
            ],
            [
              'name' => 'type',
              'type' => 'string',
              'description' => 'Content type',
              'source' => ['path' => '1'],
              'optional' => FALSE,
            ],

          ],
        ],
      ],
    ],

  ];

  return $api;
}

/**
 * Provide a one-time-login link.
 */
function _ma_mobile_client_get_one_time_login($fn) {
  global $user;
  $timestamp = REQUEST_TIME;
  return url("mobile/login/$user->uid/$timestamp/" . user_pass_rehash($user->pass, $timestamp, $user->login, $user->uid), array('absolute' => TRUE));
}

/**
 * Retrieve a NID list of a user's synced nodes, w/ last updated time, so that we don't try to sync unchanged nodes.
 */
function _ma_mobile_client_get_user_synced_nodes ($fn) {
  global $user; // TODO: confirm this user is the correct one
  $uw = entity_metadata_wrapper('user', $user);
  $synced_nodes = $uw->field_mm_sync->value();
  $synced_nids = [];
  $ref_fields = array_merge(field_read_fields(array('type' => 'node_reference')), field_read_fields(array('type' => 'entityreference')));

  foreach ($synced_nodes as $synced_node) {

    // Add the node.
    $synced_nids[$synced_node->type][$synced_node->nid] = $synced_node->changed;

    // For all the entity and node refs in the node, add those nodes to be synced as well.
    // We are going one-level deep, so entity ref'ed nodes get synced, but entity ref'ed nodes of entity ref'ed nodes do not get synced.
    // Entity-ref'ed nodes are *not* marked as synced to the user, or else their own entity refs would then get synced; this is just
    // so that when viewing the parent node, the user can see its immediate children in the ref fields.
    $snw = entity_metadata_wrapper('node', $synced_node);
    foreach ($ref_fields as $ref_field => $ref_field_properties) {
      if (isset($snw->{$ref_field}) && count($snw->{$ref_field}->raw())) {
        foreach ($snw->{$ref_field}->raw() as $reffed_nid) {
          $reffed_node = node_load ($reffed_nid);
          $synced_nids[$reffed_node->type][$reffed_node->nid] = $reffed_node->changed;
        }
      }
    }
  }
  return $synced_nids;
}

/**
 * Retrieve a list of content types that are creatable by the app.
 */
function _ma_mobile_client_get_creatable_types ($fn = NULL) {
  $ordered_types = variable_get('mukurtu_mobile_content_types', []);
  uasort($ordered_types, 'drupal_sort_weight');
  $node_types = node_type_get_types();
  $creatable_types = [];
  foreach ($ordered_types as $node_type => $node_type_properties) {
    if ($node_type_properties['creatable']) {
      $creatable_types[$node_type] = [
        'label' => $node_types[$node_type]->name,
        'description' => $node_types[$node_type]->description
      ];
    }
  }
  return $creatable_types;
}

/**
 * Retrieves the fields and their properties, and fieldgroups, of the passed content type for the current user, to be used by the app in constructing the form in React.
 */
function _ma_mobile_client_get_node_form_fields ($fn, $content_type) {

  if (!node_type_get_type($content_type)) {
    return 'Content type ' . $content_type . ' does not exist';
  }
  if (!key_exists($content_type, _ma_mobile_client_get_creatable_types())) {
    return 'Content type ' . $content_type . ' exists, but is not a valid app-creatable type.';
  }

  // Get the node form for this user and this content type.
  module_load_include('inc', 'node', 'node.pages');
  global $user;
  $node = new stdClass;
  $node->uid = $user->uid;
  $node->type = $content_type;
  $node->language = LANGUAGE_NONE;
  $node_form = drupal_get_form($content_type. '_node_form', $node);

  // Build $fields_and_fieldgroups out of the node form fields (skipping the ones we don't want), body, title, and the field groups.
  $fields_and_fieldgroups = [];
  $skip_fields = [
    'field_book_children',
    'field_book_parent',
    'field_pre_actions',
  ];
  $special_fields = [
    'title',
    'body',
    'ogg_group_fieldset',
    '#groups',
    '#group_children',
    'group_access',
    'group_register',
    'og_roles_permissions',
    'og_group_ref',
  ];
  foreach ($node_form as $key => $value) {
    if (!in_array($key, $skip_fields) AND (in_array($key, $special_fields) OR substr($key, 0, 6) == 'field_')) {
      $fields_and_fieldgroups[$key] = $value;
    }
  }

  // Custom handling per content type.
  switch ($content_type) {
    case 'digital_heritage':
      break;
  }

  // Return the form.
  return $fields_and_fieldgroups;

}


/**
 * Called from hook_update and hook_install to set to the default types that can be created by Mukurtu Mobile.
 */
function ma_mobile_client_set_default_creatable_types() {
  $ordered_creatable_types = ['digital_heritage', 'dictionary_word', 'word_list', 'lesson', 'community', 'cultural_protocol_group', 'person', 'personal_collection'];
  $default_creatable_types = [];
  $weight = 0;
  foreach ($ordered_creatable_types as $ordered_creatable_type) {
    $weight += 10;
    $default_creatable_types[$ordered_creatable_type] = [
      'creatable' => 1,
      'weight' => $weight,
    ];
  }
  variable_set('mukurtu_mobile_content_types', $default_creatable_types);
}
