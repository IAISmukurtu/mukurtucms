<?php
/**
 * @file
 * Code for the Mukurtu Search API feature.
 */

include_once 'ma_search_api.features.inc';

//// REINDEX RELATED NODES

function ma_search_api_node_insert ($node) {
  ma_search_api_node_update ($node);
}

function ma_search_api_node_update($node) {

  $relations = array(
    'collection' => array(
      'relationships' => array(
        'field_digital_heritage_items' => 'dh',
      ),
      'triggers' => array(),
    ),
    'dictionary_word' => array(
      'relationships' => array(
        'field_related_dictionary_words' => 'not dh',
        'field_dictionary_word_related_dh' => 'dh',
      ),
      'triggers' => array(),
    ),
    'digital_heritage' => array(
      'relationships' => array(
        'field_collection' => 'not dh',
        'field_related_dh_items' => 'dh',
        'og_group_ref' => 'not dh',
        'field_related_dictionary_words' => 'not dh',
      ),
      'triggers' => array(
        'field_item_privacy_setting' => 'regular',
        'og_group_ref' => 'array values comparison',
      ),
    ),
    'community' => array(
      'relationships' => array(
        'og_group_ref' => 'not dh',
      ),
      'triggers' => array(
        'og_group_ref' => 'array values comparison',
      ),
    ),
    'cultural_protocol_group' => array(
      'relationships' => array(
        'og_group_ref' => 'not dh',
      ),
      'triggers' => array(
        'group_access' => 'regular',
        'og_roles_permissions' => 'regular',
      ),
    ),
  );

  if (isset($relations[$node->type])) {

    $content_type_properties = $relations[$node->type];

    // Load both old (if any) and new versions of the node into a EMW
    $wrapper_new = entity_metadata_wrapper('node', $node);
    if (isset($node->original)) {
      $wrapper_old = entity_metadata_wrapper('node', $node->original);
    }

    $items_to_reindex = array();

    // Look for changes in any of the trigger fields. If any, ALL related nodes get reindexed.
    $reindex_all_relations = 0;
    foreach ($content_type_properties['triggers'] as $trigger => $trigger_comparison_type) {
      # dpm ($trigger, 'trigger');
      $trigger_old_val = "";
      if (isset($node->original)) {
        $trigger_old_val = $wrapper_old->{$trigger}->value();
      }
      $trigger_new_val = $wrapper_new->{$trigger}->value();
      if ($trigger_comparison_type == 'array values comparison') { // Some fields get their array keys changed as pulled by EMW even if they are not changed, so for these fields compare EMW array values to avoid false positives.
        $trigger_new_val = array_values ($trigger_new_val);
        $trigger_old_val = empty($trigger_old_val) ? NULL : array_values ($trigger_old_val);
      }
      if ($trigger_old_val <> $trigger_new_val) {
        # dpm ($trigger_old_val, 'trigger old val');
        # dpm($trigger_new_val, 'trigger new val');
        $reindex_all_relations = 1;
        # dpm ('Trigger field changed. Reindexing ALL relations');
        continue;
      }
    }

    // Look for changes in any of the reference fields.
    foreach ($content_type_properties['relationships'] as $relationship => $relationship_node_type) {
      # dpm ($relationship, 'relationship (' . $relationship_node_type . ')');

      $new_refs = ma_core_get_nids_from_array_of_nodes($wrapper_new->{$relationship}->value());

      $old_refs = array();
      if (isset($node->original)) {
        $old_refs = ma_core_get_nids_from_array_of_nodes($wrapper_old->{$relationship}->value());
      }

      // A trigger field was changed, so reindex all related values, both new and old.
      if ($reindex_all_relations) {
        $items_to_reindex = array_merge($items_to_reindex, $new_refs, $old_refs);
        # dpm($items_to_reindex, 'items to reindex after a trigger');
      }

      // A trigger field was not changed, so if there were any changed related values, reindex whatever was changed.
      elseif ($old_refs <> $new_refs) {
        $refs_added = array_diff($new_refs, $old_refs);
        $refs_deleted = array_diff($old_refs, $new_refs);
        $items_to_reindex = array_merge($items_to_reindex, $refs_added, $refs_deleted);
        # dpm($items_to_reindex, 'items to reindex after a changed relationship');
      }
    }

    // Do the reindexing
    $items_to_reindex = array_unique($items_to_reindex);
    # dpm($items_to_reindex, 'items_to_reindex final');
    if (count($items_to_reindex)) {
      search_api_index_specific_items_delayed(search_api_index_load('default_node_index'), $items_to_reindex);
    }

  }
}

/**
 * Implements hook_views_pre_view().
 */
function ma_search_api_views_pre_view(&$view, &$display_id, &$args) {

  // Rebuild permissions and reindex any DH nodes that were queued up for this op, just before the view is rendered.
  if ($view->name == 'digital_heritage_grid_list') {
    $dh_nodes_to_rebuild_and_reindex = variable_get ('mukurtu_dh_nodes_to_rebuild_perms_and_reindex', array());
    if (count($dh_nodes_to_rebuild_and_reindex)) {
      $dh_nodes_to_rebuild_and_reindex = array_unique ($dh_nodes_to_rebuild_and_reindex);
      # dpm ($dh_nodes_to_rebuild_and_reindex, '$dh_nodes_to_rebuild_and_reindex');
      // Rebuild perms
      foreach ($dh_nodes_to_rebuild_and_reindex as $dh_nid) {
        node_access_acquire_grants(node_load($dh_nid));
      }
      // Reindex
      search_api_index_specific_items (search_api_index_load('default_node_index'), $dh_nodes_to_rebuild_and_reindex);
      variable_set ('mukurtu_dh_nodes_to_rebuild_perms_and_reindex', array());
    }
  }

  // Rebuild permissions and reindex any DW nodes that were queued up for this op, just before the view is rendered.
  if ($view->name == 'dictionary_words') {
    $dw_nodes_to_rebuild_and_reindex = variable_get ('mukurtu_dw_nodes_to_rebuild_perms_and_reindex', array());
    if (count($dw_nodes_to_rebuild_and_reindex)) {
      $dw_nodes_to_rebuild_and_reindex = array_unique ($dw_nodes_to_rebuild_and_reindex);
      # dpm ($dw_nodes_to_rebuild_and_reindex, '$dw_nodes_to_rebuild_and_reindex');
      // Rebuild perms
      foreach ($dw_nodes_to_rebuild_and_reindex as $dw_nid) {
        node_access_acquire_grants(node_load($dw_nid));
      }
      // Reindex
      search_api_index_specific_items (search_api_index_load('default_node_index'), $dw_nodes_to_rebuild_and_reindex);
      variable_set ('mukurtu_dw_nodes_to_rebuild_perms_and_reindex', array());
    }
  }

}



/**
 * Implements hook_search_api_query_alter().
 * Exclude user defined nodes from search index
 * @param type $query
 */
function ma_search_api_search_api_query_alter($sapi_query) {

  $current_page = arg(0);

  // Permissions alterations. See "HOW DIGITAL HERITAGE (AND DICTIONARY WORDS) CULTURAL PROTOCOL PERMISSIONS ARE IMPLEMENTED" comment in mukurtu_protocol_field.module explaining our multi-pronged approach, including what this hook does
  if (!user_access('bypass content access control')) {

    if ($current_page == 'digital-heritage' OR $current_page = 'dictionary') {

      $type_map = array (
        'digital-heritage' => 'digital_heritage',
        'dictionary' => 'dictionary_word',
      );

      // Get all STRICT CPs that the user is not a member of
      $cp_query = new EntityFieldQuery();
      $cp_query->entityCondition('entity_type', 'node')
        ->addMetaData('account', user_load(1))// run the query as admin, or else node_access will limit
        ->entityCondition('bundle', 'cultural_protocol_group')
        ->fieldCondition(OG_ACCESS_FIELD, 'value', 2, '='); // only Strict CPs
      // Only groups the user is not a member of
      if ($user_groups = og_get_groups_by_user()) {
        $cp_query->propertyCondition('nid', $user_groups['node'], 'NOT IN');
      }
      $result = $cp_query->execute();

      // Of all the CPs that the user cannot access, get all DH/DWs within them that have Item Sharing set to "ALL"
      if (isset($result['node'])) {
        $cp_nids = array_keys($result['node']);
        # dpm($cp_nids, 'cp nids');
        $dh_query = new EntityFieldQuery();
        $dh_query->entityCondition('entity_type', 'node')
          ->addMetaData('account', user_load(1))// run the query as admin, or else node_access will limit
          ->entityCondition('bundle', $type_map[$current_page])
          ->fieldCondition('og_group_ref', 'target_id', $cp_nids, 'IN')
          ->fieldCondition('field_item_privacy_setting', 'value', 'all'); // we are only restricting DH items with Item Sharing set to "ALL"
        $result = $dh_query->execute();

        // Filter our the DH/DW items the user should not see
        if (isset($result['node'])) {
          $dh_dw_nids = array_keys($result['node']);
          # dpm($dh_dw_nids, 'dh/dw nids excluded');
          $filter = $sapi_query->createFilter('AND');
          $filter->condition('nid', $dh_dw_nids, 'NOT IN');
          $sapi_query->filter($filter);
        }
      }

    }
  }


  // Custom sorts

  if ($current_page == 'digital-heritage') { // Add Dictionary and Collections here later.

    // Sort according to the session var, otherwise fallback to default
    if (isset($_SESSION['custom_sort_order'])) {

      // Unset existing sorts
      $sort =& $sapi_query->getSort();
      $sort = array();

      // Sort map
      $sort_map = array(
        'alphabetical' => array(
          'sort' => 'search_api_aggregation_2',
        ),
        'changed' => array(
          'sort' => 'changed',
          'reverse' => TRUE,
        ),
        'added' => array(
          'sort' => 'created',
          'reverse' => TRUE,
        ),
        'oldest' => array(
          'sort' => 'field_original_date:timestamp',
        ),
        'newest' => array(
          'sort' => 'field_original_date:timestamp',
          'reverse' => TRUE,
        ),
      );
      $sort_direction = 'ASC';
      if (isset($sort_map[$_SESSION['custom_sort_order']]['reverse']) AND $sort_map[$_SESSION['custom_sort_order']]['reverse']) {
        $sort_direction = 'DESC';
      }
      $sapi_query->sort($sort_map[$_SESSION['custom_sort_order']]['sort'], $sort_direction);


      // When sorting by oldest or newest, filter out DH nodes that do not have an original date set.
      if ($_SESSION['custom_sort_order'] == 'oldest' OR $_SESSION['custom_sort_order'] == 'newest') {
        $sapi_query->condition('field_original_date:timestamp', NULL, '<>');
      }

    }
  }
}

/**
 * Implements hook_scald_atom_access
 *
 * This hook can be used to grant or deny access for a specific atom and
 * Scald action. It has the following possible return values:
 *   SCALD_ATOM_ACCESS_ALLOW
 *   SCALD_ATOM_ACCESS_DENY
 *   SCALD_ATOM_ACCESS_IGNORE
 *
 * Respect the Cultural Protocol setting on scald atoms. This is usually left blank (in which case IGNORE), but if set, if user has access to ANY of the CPs, then they get scald view access (IGNORE, to allow other handling). DENY if groups are set but they have access to none of them.
 */
function ma_search_api_scald_atom_access($atom, $action, $account = NULL) {
  $group_wrapper = entity_metadata_wrapper('scald_atom', $atom);
  if (!isset($group_wrapper->field_scald_protocol)) {
    return SCALD_ATOM_ACCESS_IGNORE;
  }
  if ($groups = $group_wrapper->field_scald_protocol->value()) {
    foreach ($groups as $group) {
      if (node_access('view', $group)) {
        return SCALD_ATOM_ACCESS_IGNORE;
      }
    }
    return SCALD_ATOM_ACCESS_DENY;
  }
  return SCALD_ATOM_ACCESS_IGNORE;
}

/**
 * Implements hook_menu().
 */
function ma_search_api_menu() {
  $items = array();

  // Indexed Fields page for admins (linked from dashboard)
  $items['indexed-fields'] = array(
    'title' => 'Indexed Fields',
    'page callback' => 'ma_search_api_list_of_indexed_fields',
    'access callback' => 'user_access',
    'access arguments' => array('access administration pages'),
    'type' => MENU_SUGGESTED_ITEM,
  );
  return $items;
}

/**
 * Display indexed fields
 */
function ma_search_api_list_of_indexed_fields() {

  // Load the list of indexed fields
  $index = search_api_index_load('default_node_index');
  $indexed_fields = $index->options['fields'];

  // Remove the index field property from the field name if there is one
  foreach ($indexed_fields as $indexed_field_name => $indexed_field_values) {
    if ($before_colon = strstr($indexed_field_name, ':', TRUE)) {
      $indexed_fields_field_name_only[] = $before_colon;
    }
    else {
      $indexed_fields_field_name_only[] = $indexed_field_name;
    }
  }

  // Reduce duplicates created because sometimes we index a field in two different ways but are now shown as one since we removed their property
  $indexed_fields_field_name_only = array_unique($indexed_fields_field_name_only);

  // Remove these fields from the list (usually because they are used for facets and aren't intended for searching)
  #dpm ($indexed_fields_field_name_only);
  $fields_to_skip = array (
    'field_media_asset',
    'field_digital_heritage_count',
    'field_digital_heritage_items',
  );

  // Build array of fields keyed by content type then field name
  $field_info = field_info_field_map();
  foreach ($indexed_fields_field_name_only as $indexed_field_name) {
    if (!in_array($indexed_field_name, $fields_to_skip)) {
      if (isset ($field_info[$indexed_field_name]['bundles']['node'])) {
        foreach ($field_info[$indexed_field_name]['bundles']['node'] as $content_type) {
          $indexed_fields_per_content_type[$content_type][] = $indexed_field_name;
        }
      }
    }
  }

  // Build the output
  $output = '<p>The following fields will return results if their contents match searches made at ' . l("Browse Digital Heritage", 'digital-heritage') . ' or ' . l("Browse Collections", 'collections') . '.<p>';
  $content_types_to_show = array ( // Limit the list to just the content types that have search pages
    'digital_heritage',
    'collection',
  );
  $types = node_type_get_types();
  foreach ($indexed_fields_per_content_type as $content_type => $indexed_fields) {
    if (in_array($content_type, $content_types_to_show)) {
      $output .= '<h3>' . node_type_get_name($content_type) . '</h3><ul>'; // content type as header
      $output .= '<li>' . $types[$content_type]->title_label . '</li>'; // node title label is the sole node property (ie. not a field) that we want to show here
      foreach ($indexed_fields as $indexed_field) {
        $field_info = field_info_instance('node', $indexed_field, $content_type);
        $output .= '<li>' . $field_info['label'] . '</li>';
      }
      $output .= '</ul>';
    }
  }
  return $output;

}

// Return the config for the Search API whitespace tokenizer regex
function ma_search_api_get_whitespace_tokenizer_regex() {
  // Default value
  $spaces = "[\p{P}|\p{C}|\p{Z}|\p{S}]";

  $server = search_api_server_load('search_api_db_server');
  if($server) {
    $index = search_api_index_load('default_node_index');
    if($index) {
      $spaces = $index->options['processors']['search_api_tokenizer']['settings']['spaces'];
    }
  }

  return $spaces;
}

/**
 * Implements hook_entity_property_info_alter().
 *
 * Custom index fields.
 */
function ma_search_api_entity_property_info_alter(&$info) {
  $info['node']['properties']['dh_original_year'] = array(
    'type'            => 'integer',
    'label'           => t('DH Original Year'),
    'sanitized'       => TRUE,
    'getter callback' => 'ma_search_api_getter_callback_dh_original_year',
  );
}
// The sort is done on the timestamp component of the original date field. This is being indexed when/if we add a year filter.
function ma_search_api_getter_callback_dh_original_year($item) {
  if (isset($item->field_original_date[LANGUAGE_NONE][0]['from']['year'])) {
    return $item->field_original_date[LANGUAGE_NONE][0]['from']['year'];
  }
}

/**
 * Implementation of hook_block_info().
 */
function ma_search_api_block_info() {
  $blocks['ma_custom_sorts'] = array(
    'info' => t('Custom sorts for the browse pages'),
  );
  return $blocks;
}


/**
 * Implementation of hook_block_view().
 */
function ma_search_api_block_view($delta = '') {
  $block = array();

  switch ($delta) {

    case 'ma_custom_sorts':
      $block['subject'] = 'Sort';
      $search_form = drupal_get_form('ma_search_api_sort_form');
      $block['content'] = drupal_render($search_form);
      break;
  }

  return $block;

}

/**
 * Returns the render array for the form.
 */
function ma_search_api_sort_form($form, &$form_state) {
  $sort_options = array(
    'changed' => t('Date Changed'),
    'added' => t('Date Added'),
    'newest' => t('Newest'),
    'oldest' => t('Oldest'), // NOTE: If the Original Date field is unset, date = 0, so those DH nodes will appear at top of Oldest list. This is a limitation of using the DB for the Search API backend. It should be resolveable when / if switching to SOLR.
    'alphabetical' => t('Alphabetical'),
  );

  $form['sort'] = array(
    '#type' => 'select',
    '#default_value' => isset($_SESSION['custom_sort_order']) ? $_SESSION['custom_sort_order'] : 'changed',
    '#options' => $sort_options,
    '#attributes' => array('onchange' => 'this.form.submit();'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#attributes' => array('class' => array('element-invisible')),
  );
  return $form;
}
function ma_search_api_sort_form_submit($form, $form_state){
  if (isset ($form_state['values']['sort'])) {
    $_SESSION['custom_sort_order'] = $form_state['values']['sort'];
  }
}
