<?php

define("MUKURTU_EXPORT_IMPORT_DIR", "[mukurtu:batch_import_temp_directory]"); 

/**
 * @file
 * The Mukurtu export module.
 *
 * Allows users to export Mukurtu content.
 */

 function mukurtu_export_menu() {
    $items['node/%node/mukurtu-export'] = array(
        'access callback' => 'mukurtu_export_access_export',
        'access arguments' => array(1),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('mukurtu_export_form'),
        'title' => 'Mukurtu export',
        'type' => MENU_LOCAL_TASK,
        'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
        'file' => 'mukurtu_export.pages.inc',
      );

      $items['atom/%scald_atom/mukurtu-export'] = array(
        'access callback' => 'mukurtu_export_access_export',
        'access arguments' => array(1),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('mukurtu_export_form'),
        'title' => 'Mukurtu export',
        'type' => MENU_LOCAL_TASK,
        'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
        'file' => 'mukurtu_export.pages.inc',
      );

      return $items;
 }

 function mukurtu_export_access_export($entity, $entity_type = 'node') {
    global $user;

    if (is_int($entity)) {
      $entity = array_shift(entity_load($entity_type, array($entity)));
    }

    if (function_exists('drush_main')) {
      // Always allow drush to export nodes.
      $access = TRUE;
    }
    else {
      // Check basic role permissions first.
      $access = TRUE;

      // Allow only admins to export
      $access = $access && (in_array('administrator', $user->roles)
                            || in_array('Mukurtu Administrator', $user->roles)
                            || in_array('Community Administrator', $user->roles));

      // Make sure the user can view the original content.
      $access = $access && entity_access('view', $entity_type, $entity);
    }

    return $access;
 }

 function mukurtu_export($entities, $format) {


 }

// Field handlers can further process the raw field values.
// For example, during export we might want to load the title of a taxonomy term, rather than
// simply exporting the tid.
function mukurtu_export_field_handlers() {
  module_load_include('inc', 'mukurtu_export', 'mukurtu_export.field_handlers');
  $field_handlers = &drupal_static(__FUNCTION__);
  if (empty($field_handlers)) {
    $field_handlers = module_invoke_all('mukurtu_export_field_handlers');
  }
  // Let other modules override our handlers
  drupal_alter('mukurtu_export_field_handlers', $field_handlers);

  // Load all the files for the handler callbacks, presumably they are about to be used
  foreach($field_handlers as $handler) {
    if (!empty($handler['#file']) && is_file($handler['#file'])) {
      require_once $handler['#file'];
    }
  }

  return $field_handlers;
}

/**
 * Get a list of format handlers
 *
 * @return
 *   An array of format handlers from hook implementations.
 * @see hook_mukurtu_export_format_handlers()
 */
function mukurtu_export_format_handlers() {
  module_load_include('inc', 'mukurtu_export', 'mukurtu_export.format_handlers');
  $format_handlers = &drupal_static(__FUNCTION__);
  if (empty($format_handlers)) {
    $format_handlers = module_invoke_all('mukurtu_export_format_handlers');
  }
  drupal_alter('mukurtu_export_format_handlers', $format_handlers);
  return $format_handlers;
}

function mukurtu_export_extract_value($entity_type, $field_name, $value, $options = array()) {
  // Make hook to allow custom changes?

  $referenced_entities = array();
  $field_handlers = mukurtu_export_field_handlers();

  // Headers, no value to extract
  if(is_numeric($field_name)) {
    return array($value, $referenced_entities);
  }

  $field_info = field_info_field($field_name);

  if(!is_null($field_info) && isset($field_info['type'])) {
    if(isset($field_handlers[$field_info['type']])
      && isset($field_handlers[$field_info['type']]['#callback'])
      && function_exists($field_handlers[$field_info['type']]['#callback'])
      ) {
      return call_user_func($field_handlers[$field_info['type']]['#callback'], $value, $field_info, $options);
    }
  }

  if(is_null($field_info)) {
    if(isset($field_handlers['simple'][$field_name])
    && isset($field_handlers['simple'][$field_name]['#callback'])
    && function_exists($field_handlers['simple'][$field_name]['#callback'])) {
      return call_user_func($field_handlers['simple'][$field_name]['#callback'], $value, $field_info, $options);
    }
  }

  if($value == 'private://atoms/image/rudolph.jpg') {
    //dpm("hi"); //$field_name = NULL, $entity_type = 'file'
  }

  if(isset($value['value'])) {
    return array($value['value'], $referenced_entities);
  }
  return array($value, $referenced_entities);
}

/* VBO Functions */
function mukurtu_export_action_info() {
  return array(
    'mukurtu_export_action' => array(
      'type' => 'node',
      'label' => t('Mukurtu Export'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => TRUE,
      'triggers' => array('any'),
    ),
  );
}

function mukurtu_export_action_form($settings, &$form_state) {
  kpr($settings);
  kpr($form_state);
  //$form_state['build_info']['args'][0]->result
  return drupal_get_form('mukurtu_export_form');
}


function _mukurtu_export_entity_type($entity) {
  if(is_object($entity)) {
    if(isset($entity->nid)) {
      return 'node';
    }
    if(isset($entity->sid)) {
      return 'scald_atom';
    }
  }

  return NULL;
}

function _mukurtu_export_entity_id($entity_type = NULL, $entity = NULL) {
  if(is_null($entity_type)) {
    $entity_type = _mukurtu_export_entity_type($entity);
  }

  switch($entity_type) {
    case 'scald_atom':
      return 'sid';
    case 'node':
    default:
      return 'nid';
  }
}

function _mukurtu_export_entity_get_guid($entity_type, $entity_id) {
  $entity = entity_load($entity_type, array($entity_id));
  $entity_wrapper = entity_metadata_wrapper($entity_type, $entity[$entity_id]);
  
  $feeds_info = feeds_item_info_load($entity_type, $entity_id);
  // Check for an existing feeds guid
  if($feeds_info && isset($feeds_info->guid)) {
    return $feeds_info->guid;
  }

  // Otherwise generate a new one
  $guid = implode('_', array($entity_wrapper->getBundle(), $entity_id, $entity[$entity_id]->created));
  return $guid;
}